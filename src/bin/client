#!/usr/bin/env python3

import tkinter as tk
from tkinter import ttk, filedialog as fd

import json
import socket
import requests
import shutil
import os
import subprocess
import pip
import importlib.util

# extra packages required to run services invoked by client
EXTRA_PACKAGES = [
	'gevent',
	'psutil',
]

WIDTH = 300
HEIGHT = 200
INPUT_CHAR_WIDTH = 21
MARGIN_LEFT = 30
MARGIN_TOP = 10
BUTTON_SIZE = WIDTH - 2 * MARGIN_LEFT

LARGE_FONT = ("Verdana", 20)
SMALL_FONT = ("Arial", 15)

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

def check_extra_packages():
	for package in EXTRA_PACKAGES:
		spec = importlib.util.find_spec(package)
		if spec is None:
			pip.main(['install', package])
		else:
			print(f"package {package} already installed")

class tkinterApp(tk.Tk):
	def __init__(self, *args, **kwargs):
		tk.Tk.__init__(self, *args, **kwargs)

		# creating a container
		container = tk.Frame(self)
		container.pack(side="top", fill="both", expand=True)

		container.grid_rowconfigure(0, weight=1)
		container.grid_columnconfigure(0, weight=1)

		# initializing frames to an empty array
		self.frames = {}

		# iterating through a tuple consisting
		# of the different page layouts
		for F in (StartPage, MainPage):

			frame = F(container, self)

			# initializing frame of that object from
			# startpage, page1, page2 respectively with
			# for loop
			self.frames[F] = frame

			frame.grid(row=0, column=0, sticky="nsew")

		self.show_frame(StartPage)

	# to display the current frame passed as parameter
	def show_frame(self, cont):
		frame = self.frames[cont]
		frame.tkraise()

def remove_inside_folder(folder):
	for filename in os.listdir(folder):
		file_path = os.path.join(folder, filename)
		try:
			if os.path.isfile(file_path) or os.path.islink(file_path):
				os.unlink(file_path)
			elif os.path.isdir(file_path):
				shutil.rmtree(file_path)
		except Exception as e:
			print('Failed to delete %s. Reason: %s' % (file_path, e))

class StartPage(tk.Frame):
	def login_function(self):
		username = self.username_input.get()
		password = self.pass_input.get()

		response = requests.post("http://129.104.213.16:8000/login", data={
			"username": username,
			"password": password
		})

		if response.status_code != 200:
			print("login failed")
			print(response.json())
			return

		print("login success")

		# TODO: Replace the following commented code with another VPN setup
		# remove_inside_folder("/etc/tinc/vpn")

		# with open("/etc/tinc/vpn/config.zip", "wb") as f:
			# f.write(response.content)

		# result = subprocess.run(["7z", "x", "/etc/tinc/vpn/config.zip", "-o/etc/tinc/vpn/"])
		# if result.returncode != 0:
		# 	print("unzip failed")
		# 	return

		# os.chmod("/etc/tinc/vpn/tinc-up", 0o700)
		# os.chmod("/etc/tinc/vpn/tinc-down", 0o700)

		# result = subprocess.run(["systemctl", "restart", "tinc@vpn"])
		# if result.returncode != 0:
		# 	print("restart tinc failed")
		# 	return

		check_extra_packages()

		file_path = os.path.abspath(os.path.dirname(__file__))
		service_command = f"{file_path}/service"
		subprocess.run(["pkill", "-f", service_command])
		subprocess.Popen([service_command])

		while True:
			try:
				sock.settimeout(3)
				sock.connect(("localhost", 8080))
			except socket.error as e:
				print("connection failed")
				continue
			else:
				print("connection success")
				sock.settimeout(None)
				break

		self.controller.show_frame(MainPage)

	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		self.controller = controller

		self.username_label = tk.Label(self, text="Username", font=SMALL_FONT)
		self.username_label.place(x=MARGIN_LEFT, y=MARGIN_TOP)
		self.username_input = tk.Entry(self, width=INPUT_CHAR_WIDTH, font=SMALL_FONT)
		self.username_input.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 30))
		self.pass_label = tk.Label(self, text="Password", font=SMALL_FONT)
		self.pass_label.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 60))
		self.pass_input = tk.Entry(self, show="*", width=INPUT_CHAR_WIDTH, font=SMALL_FONT)
		self.pass_input.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 90))
		self.login_button = tk.Button(self, text="Login", font=SMALL_FONT, command=self.login_function)
		self.login_button.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 130), width=BUTTON_SIZE)

# second window frame page1
class MainPage(tk.Frame):
	def select_file(self):
		filename = fd.askopenfilename()
		print(filename)
		self.btn_text.set(filename)
		self.data = open(filename, "rb").read()

	def send_print_req(self):
		if self.data is None:
			print("please select file first")
			return
		else:
			print("sending print request")
			sock.sendall(json.dumps({
				"__id": "client",
				"__method": "print",
				"__params": {
					"source": self.data
				}
			}).encode("utf-8") + b"\r\n")
			print("sent print request")


	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		self.controller = controller
		self.data = None

		label = tk.Label(self, text="Connected", font=LARGE_FONT)
		label.grid(row=0, column=4, padx=10, pady=10)

		self.btn_text = tk.StringVar()
		self.btn_text.set("Select file")
		send_print_req_button = tk.Button(self, text="Send print request", font=SMALL_FONT, command=self.send_print_req)
		send_print_req_button.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 60), width=BUTTON_SIZE)
		select_file_button = tk.Button(self, text=self.btn_text, font=SMALL_FONT, command=self.select_file)
		select_file_button.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 120), width=BUTTON_SIZE)


root = tkinterApp()
root.title("Client")
root.geometry(f"{WIDTH}x{HEIGHT}")
root.mainloop()
