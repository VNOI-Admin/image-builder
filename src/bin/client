#!/usr/bin/env python3

import tkinter as tk
from tkinter import ttk, filedialog as fd

import json
import socket
import requests
import shutil
import os
import subprocess
from ping3 import ping
import requests

WIDTH = 300
HEIGHT = 200
INPUT_CHAR_WIDTH = 21
MARGIN_LEFT = 30
MARGIN_TOP = 10
BUTTON_SIZE = WIDTH - 2 * MARGIN_LEFT

LARGE_FONT = ("Verdana", 20)
SMALL_FONT = ("Arial", 15)

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

class tkinterApp(tk.Tk):
	def __init__(self, *args, **kwargs):
		tk.Tk.__init__(self, *args, **kwargs)

		# creating a container
		container = tk.Frame(self)
		container.pack(side="top", fill="both", expand=True)

		container.grid_rowconfigure(0, weight=1)
		container.grid_columnconfigure(0, weight=1)

		# initializing frames to an empty array
		self.frames = {}

		# iterating through a tuple consisting
		# of the different page layouts
		for F in (StartPage, MainPage):

			frame = F(container, self)

			# initializing frame of that object from
			# startpage, page1, page2 respectively with
			# for loop
			self.frames[F] = frame

			frame.grid(row=0, column=0, sticky="nsew")

		self.show_frame(StartPage)

	# to display the current frame passed as parameter
	def show_frame(self, cont):
		frame = self.frames[cont]
		frame.tkraise()

def remove_inside_folder(folder):
	for filename in os.listdir(folder):
		file_path = os.path.join(folder, filename)
		try:
			if os.path.isfile(file_path) or os.path.islink(file_path):
				os.unlink(file_path)
			elif os.path.isdir(file_path):
				shutil.rmtree(file_path)
		except Exception as e:
			print('Failed to delete %s. Reason: %s' % (file_path, e))

class StartPage(tk.Frame):
	def login_function(self):
		username = self.username_input.get()
		password = self.pass_input.get()

		response = requests.post("http://vpn.vnoi.info:8000/login", data={
			"username": username,
			"password": password
		})

		if response.status_code != 200:
			print("login failed")
			print(response.json())
			return

		print("login success")
		remove_inside_folder("/etc/wireguard")

		with open("/etc/wireguard/client.conf", "w") as f:
			f.write(response.content.decode("utf-8"))

		os.chmod("/etc/wireguard/client.conf", 0o600)

		result = subprocess.run(["systemctl", "restart", "wg-quick@client"], stdout=subprocess.PIPE)
		print(result.stdout)

		file_path = os.path.abspath(os.path.dirname(__file__))
		service_command = f"{file_path}/service"
		subprocess.run(["pkill", "-f", service_command])
		subprocess.Popen([service_command])

		self.controller.show_frame(MainPage)

	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		self.controller = controller

		self.username_label = tk.Label(self, text="Username", font=SMALL_FONT)
		self.username_label.place(x=MARGIN_LEFT, y=MARGIN_TOP)
		self.username_input = tk.Entry(self, width=INPUT_CHAR_WIDTH, font=SMALL_FONT)
		self.username_input.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 30))
		self.pass_label = tk.Label(self, text="Password", font=SMALL_FONT)
		self.pass_label.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 60))
		self.pass_input = tk.Entry(self, show="*", width=INPUT_CHAR_WIDTH, font=SMALL_FONT)
		self.pass_input.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 90))
		self.login_button = tk.Button(self, text="Login", font=SMALL_FONT, command=self.login_function)
		self.login_button.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 130), width=BUTTON_SIZE)

# second window frame page1
class MainPage(tk.Frame):
	def select_file(self):
		self.can_send = True
		self.filename = fd.askopenfilename()
		self.select_file_button["text"] = os.path.split(self.filename)[1]

	def send_print_req(self):
		if not self.can_send:
			print("please select file first")
			return
		else:
			print("sending print request")
			r = requests.post("http://10.1.0.1:8000/print", files={ 'file': open(self.filename) })
			print(r.status_code)
			self.can_send = False
			self.filename = None
			self.select_file_button["text"] = "Select file"


	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		self.controller = controller
		self.filename = None
		self.can_send = False

		label = tk.Label(self, text="Connected", font=LARGE_FONT)
		label.grid(row=0, column=4, padx=10, pady=10)

		self.select_file_button = tk.Button(self, text="Select file", font=SMALL_FONT, command=self.select_file)
		self.select_file_button.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 60), width=BUTTON_SIZE)
		send_print_req_button = tk.Button(self, text="Send print request", font=SMALL_FONT, command=self.send_print_req)
		send_print_req_button.place(x=MARGIN_LEFT, y=(MARGIN_TOP + 120), width=BUTTON_SIZE)


root = tkinterApp()
root.title("Client")
root.geometry(f"{WIDTH}x{HEIGHT}")
root.resizable(False, False)
root.protocol("WM_DELETE_WINDOW", lambda: root.iconify())
root.mainloop()
